registerHelp('Tree', {
    title: 'Дерево. Многоколоночное. С функцией мониторинга состояния (иконка и текст могут меняться). Поддерживается ленивая подгрузка узлов.',
    //descr: '',
    options:{
        selectable: 'boolean. можно ли выбирать элементы(в каждый момент времени может быть выбран только один элемент). По умолчанию - да.',
        getChildren: 'function. На вход id родителя (или undefined для корневых элементов). На выход - список дочерних элементов (см. help(\'Tree\', \'item\')). Если задано, get_children_url игнорируется и ленивая подгрузка не используется.',
        getChildrenUrl: 'function. На вход id родителя (или undefined для корневых элементов). На выход - URL, с которого грузить дочерние элементы (см. help(\'Tree\', \'item\')',
        //updates. Имеется ввиду автоматическое обновление дерева, в случае, когда данные изменились на сервере. Для ручного изменения данных используйте объект changes.
        // Обновления пока не поддерживаются - когда надо будет, надо будет в Тралива включать Инициатор (агент обратной связи с сервером), и изменения в дереве получат ьчерез тот агент.
        //updates: 'объект. Поля: "initiator" - ; "interval" - интервал между запросами изменений в миллисекундах; "url" - сетевой адрес, по которому запрашивать изменения дерева.'
        color: 'цвет текста',
        guiElements: 'Объект, характеризующий отображение элементов дерева. Поля:\n\ttreeicons_sprite - путь к спрайту, содержащем набор линий и узлов в разных состояниях\n\ttreeicons_w - ширина элемента спрайта (в пикселях)\n\ttreeicons_h - высота элемента спрайта (в пикселях)\n\tstates_sprite - путь к спрайту, содержащем набор иконок для разных состояний узла дерева\n\tstates_w - ширина элемента спрайта (в пикселях)\n\tstates_h - высота элемента спрайта (в пикселях)',
        shared: 'true, если снятие флага changes в объекте состояния не надо делать(пользователь устанавливает данные и флаг changes, затем снимает флаг changes)\n\
    false, если хотите, чтобы виджет сам снимал флаг changes после того, как изменения данных были отображены в виджете.\n\
    по умолчанию, true. Так что сами сбрасывайте флаг changes, или задайте опцию "shared: false"',
    },
    stateObj:{
        changes: 'объект, который описывает, какие элементы и как были изменены. Если не задано, виджет считает, что данные не изменились, и обновлять их отображение не нужно. Поля: "added", "changed", "removed" - в каждом список идентификаторов элементов.'
    },
    children:{
        item:{
            title: 'Формат описания элемента дерева',
            options:{
                id: 'string. Уникальный идентификатор элемента дерева.',
                d: 'array. Массив, в котором задано содержимое ячеек. Для первой колонки задаётся содержимое без учёта иконки "состояния" элемента. См. help(\'Tree\', \'item\', \'content\')',
                hasChildren: 'boolean. Имеет ли этот элемент дочерние элементы, т.е. есть ли смысл запрашивать для этого элемента дочерние элементы',
                state: 'integer. Идентификатор (порядковый номер (от нуля)) "состояния" элемента - какой значок показывать'
            },
            children:{
                content:{
                    title: 'Формат описания содержимого ячейки',
                    options:{
                        e: 'текст'
                    }
                }
            }
        }
    }
});
